Overview
========

This is a management application for maintaining and managing purls and arks.
Together these resources allow the assignment of unique persistant identifiers.

You can find more information on
`arks <http://en.wikipedia.org/wiki/Archival_Resource_Key>`_ and
`purls <http://purl.oclc.org/docs/index.html>`_


Dependencies
============

 * soaplib==0.8.1 -  http://pypi.python.org/pypi/soaplib
 * psycopg2    - currently requires postgres & psycopg2 for stored procedure
 * python-ldap
 * python-lxml - http://codespeak.net/lxml/installation.html
 * django 1.2+
 * south==0.7.2

Extensions
==========
We rely on a couple of externally-developed extensions. They need to be
downloaded added to the python path. Extensions are listed in settings.py
and annotated with where they can be downloaded. Put them into a directory
and add that local path to the EXTENSION_DIRS in localsettings.py.

Components
==========

The component applications of this project are:

pid
---
Core application to represent pid objects and build central behaviors for them.

pidauth
-------

resolver
--------

rest_api
--------
Provides a rest api for selected pid functions such as create, edit and delete
model objects from `pidman.pid.models`.

soap_api
--------



Installation
============
Create PostGres database and grant privileges to user
Copy pidman/localsettings-example.py to pidman/localsettings.py
Configure localsettings
Execute the following::

    $ pidman/manage.py syncdb
    $ pidman/manage.py migrate
    
To verify installation execute without errors::

    $ pidman/manage.py test


Unit Tests
==========
All unit tests should be run EXCEPT for the ones in linkcheck module.
Currently they are not compatible with django 1.1.  To  run unit tests use the
following command while in the pidman directory::

    $ python ./manage.py test auth admin contenttypes sessions sites soap_api
    $ pid pidauth resolver usage_stats rest_api
